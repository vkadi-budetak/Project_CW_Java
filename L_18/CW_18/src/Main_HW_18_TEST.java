import java.util.Arrays;

public class Main_HW_18_TEST{
    public static void main(String[] args) {
        int[] ar1={1,4,8,3,1,9,4,0};
        System.out.println(Arrays.toString(ar1));
        System.out.println("------------- 1-------------");
        System.out.println(sum(ar1));
        System.out.println("--------------- 2 ---------");
        boolean[] ar2={true,true,false,true};
        System.out.println(count(ar2));
        System.out.println("----------------- 3 ------------");
        String[] ar3={"Vasya", "Petya", "Kolya"};
        print3(ar3);
        System.out.println("----------------- 4 --------------");
        print4(ar3);
        System.out.println("------------- 5 ------------------");
        System.out.println(Arrays.toString(ar1));
        System.out.println(sumOddIndex(ar1));
        System.out.println("------------- 6 ----------------");
//        Arrays.fill(ar1,-5);
        System.out.println(maxArray(ar1));
        System.out.println("------------- 7 -----------------");
        System.out.println(avgArray(ar1));

    }

    private static double avgArray(int[] ar) {
        int sum=0;
        for (int i = 0; i < ar.length; i++) sum+=ar[i] ;
        return (double) sum / ar.length;
//        return 1.0 * sum / ar.length;
//        return (sum+0.0) / ar.length;
//        return sum / ar.length; // ERROR —Ç–µ—Ä—è–µ–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å –∏–∑-–∑–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è
    }

    private static int maxArray(int[] ar) {
        int max=ar[0];
//        int max=0; ERROR
//        int max=Integer.MIN_VALUE; // —Ä–µ—à–µ–Ω–∏–µ –≤–µ—Ä–Ω–æ–µ, –Ω–æ –Ω–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ
        for (int a : ar) if (a>max) max=a;
        return max;
    }

    private static int sumOddIndex(int[] ar) {
        int res=0;
        for (int i=0; i<ar.length; i++){
            if (i%2!=0){
                res+=ar[i];
            }
        }
//        for (int i=1; i<ar.length; i+=2) res+=ar[i];
        return res;
    }

    private static void print4(String[] ar) {
        for (int i=ar.length-1; i>0; i--)
            System.out.print(ar[i]+" , ");
        System.out.println(ar[0]);
    }

    private static void print3(String[] ar) {
        for (int i=ar.length-1; i>=0; i--) System.out.print(ar[i]+" , ");
        System.out.println();
    }

    private static int count(boolean[] ar) {
        int res=0;
        for (boolean a: ar){
            res = a ? res+1 : res;
        }
        return res;
    }

    private static int sum(int[] ar1) {
        int res=0;
        for (int a: ar1){
            res+=a;
        }
        return res;
    }
}

/*
1 (15)
# –ú–∞—Å—Å–∏–≤—ã: —Å—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ int[]

## üßÆ –ó–∞–¥–∞–Ω–∏–µ
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ `sum(int[] ar)`, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö
—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ `int[]`. –ü–æ–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞ –≤ `main`.

2 (16)
# –ú–∞—Å—Å–∏–≤—ã: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ true –≤ boolean[]

## üßÆ –ó–∞–¥–∞–Ω–∏–µ
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ `count(boolean[] ar)`, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
—ç–ª–µ–º–µ–Ω—Ç–æ–≤ `true` –≤ –º–∞—Å—Å–∏–≤–µ `boolean[]`. –ü–æ–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞ –≤ `main`.

3 (17)
# –ú–∞—Å—Å–∏–≤—ã: –ø–µ—á–∞—Ç—å –∏–º—ë–Ω –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (—Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ)

## üßÆ –ó–∞–¥–∞–Ω–∏–µ
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ `print(String[] ar)`, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—á–∞—Ç–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞
—Å—Ç—Ä–æ–∫ **–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ** —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏ –∑–∞–ø—è—Ç—É—é –≤ –∫–æ–Ω—Ü–µ.
–ü–æ–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞ –≤ `main`.

4 (18)
# –ú–∞—Å—Å–∏–≤—ã: –ø–µ—á–∞—Ç—å –∏–º—ë–Ω –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –±–µ–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø—è—Ç–æ–π

## üßÆ –ó–∞–¥–∞–Ω–∏–µ
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ `print(String[] ar)`, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—á–∞—Ç–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞
—Å—Ç—Ä–æ–∫ **–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ** —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é **–±–µ–∑** –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ.
–ü–æ–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞ –≤ `main`.

5(19)

# –ú–∞—Å—Å–∏–≤—ã: —Å—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –Ω–µ—á—ë—Ç–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏

## üßÆ –ó–∞–¥–∞–Ω–∏–µ
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ `sumOddIndex(int[] ar)`, –∫–æ—Ç–æ—Ä—ã–π —Å—É–º–º–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã
–º–∞—Å—Å–∏–≤–∞ —Å –Ω–µ—á—ë—Ç–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏ (1,3,5,...). –ü–æ–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞ –≤ `main`.

6(20)

# –ú–µ—Ç–æ–¥—ã: –º–∞–∫—Å–∏–º—É–º –≤ –º–∞—Å—Å–∏–≤–µ int[]

## üß© –ó–∞–¥–∞–Ω–∏–µ
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ `maxArray(int[] ar)`, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
–º–∞—Å—Å–∏–≤–∞. –ü–æ–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–µ—Ç–æ–¥–∞ –≤ `main`.

7(21)

# –ú–µ—Ç–æ–¥—ã: —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ int[] (double)

## üß© –ó–∞–¥–∞–Ω–∏–µ
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –º–µ—Ç–æ–¥ `avgArray(int[] ar)`, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ –≤ –≤–∏–¥–µ `double`. –ü–æ–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—Ç—É –≤ `main`.
 */
