/**
 * Класс демонстрирует использование обобщенных (generic) методов в Java.
 * Обобщенные методы позволяют создавать методы, которые могут работать с различными типами данных,
 * обеспечивая при этом типобезопасность на этапе компиляции.
 */
public class GenericsMethods {

    /**
     * Обобщенный метод для обмена местами двух элементов в массиве.
     *
     * Синтаксис <T> перед возвращаемым типом указывает, что это обобщенный метод.
     * T - это параметр типа, который может быть заменен любым конкретным типом
     * при вызове метода (String, Integer, Double и т.д.).
     *
     * @param <T> параметр типа - может быть любым ссылочным типом
     * @param array массив элементов типа T
     * @param i индекс первого элемента для обмена
     * @param j индекс второго элемента для обмена
     */
    public static <T> void swap(T[] array, int i, int j) {
        // Создаем временную переменную типа T для хранения значения
        T temp = array[i];
        // Присваиваем элементу с индексом i значение элемента с индексом j
        array[i] = array[j];
        // Присваиваем элементу с индексом j сохраненное значение
        array[j] = temp;
    }

    /**
     * Обобщенный метод с двумя параметрами типа для вывода пары значений.
     *
     * Этот метод демонстрирует использование нескольких параметров типа в одном методе.
     * <T, U> означает, что метод принимает два разных типа параметров,
     * которые могут быть как одинаковыми, так и разными.
     *
     * @param <T> первый параметр типа
     * @param <U> второй параметр типа
     * @param first первое значение типа T
     * @param second второе значение типа U
     */
    public static <T, U> void printPair(T first, U second) {
        // Выводим первое значение и его тип
        System.out.println("Первый: " + first + " (" +
                first.getClass().getSimpleName() + ")");
        // Выводим второе значение и его тип
        System.out.println("Второй: " + second + " (" +
                second.getClass().getSimpleName() + ")");
    }

}
