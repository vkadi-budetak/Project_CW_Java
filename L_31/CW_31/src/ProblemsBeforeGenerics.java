import java.util.ArrayList;
import java.util.List;

/**
 * Демонстрационный класс, показывающий проблемы, которые возникали до введения дженериков в Java.
 *
 * До Java 5 (2004 год) коллекции могли хранить только объекты типа Object,
 * что приводило к серьезным проблемам с типобезопасностью и необходимости
 * явного приведения типов (casting), которое могло вызывать ошибки времени выполнения.
 *
 * ВНИМАНИЕ: Этот код демонстрирует ПЛОХУЮ практику и содержит ошибку!
 */
public class ProblemsBeforeGenerics {

    /**
     * Главный метод, демонстрирующий основные проблемы до введения дженериков.
     *
     * @param args аргументы командной строки (не используются)
     */
    public static void main(String[] args) {

        // === ПРОБЛЕМА 1: ОТСУТСТВИЕ КОНТРОЛЯ ТИПОВ ===
        // Создаем "сырой" (raw) список без указания типа
        // Такой список может содержать объекты ЛЮБОГО типа
        List list = new ArrayList<>();

        // === ПРОБЛЕМА 2: ВОЗМОЖНОСТЬ ДОБАВЛЕНИЯ РАЗНОТИПНЫХ ОБЪЕКТОВ ===
        // Компилятор НЕ ПРЕДУПРЕЖДАЕТ о том, что мы добавляем разные типы!
        list.add("Строка");     // добавляем строку (String)
        list.add(42);           // добавляем целое число (Integer)
        list.add(3.14);         // добавляем число с плавающей точкой (Double)

        // === ПРОБЛЕМА 3: ОШИБКА ВРЕМЕНИ ВЫПОЛНЕНИЯ (ClassCastException) ===
        // Попытка обработать все элементы как строки приведет к ошибке!
        // Ошибка произойдет НЕ на этапе компиляции, а во время выполнения программы
        System.out.println("Попытка обработать все элементы как строки:");

        try {
            for (Object object : list) {
                // === ОПАСНОЕ ПРИВЕДЕНИЕ ТИПА ===
                // Мы ПРЕДПОЛАГАЕМ, что все объекты - строки, но это не так!
                String str = (String) object;  // Здесь произойдет ClassCastException!
                System.out.println(str.toUpperCase());
            }
        } catch (ClassCastException e) {
            // === РЕЗУЛЬТАТ: ОШИБКА ВРЕМЕНИ ВЫПОЛНЕНИЯ ===
            System.err.println("ОШИБКА! Не удалось привести объект к типу String: " + e.getMessage());
            System.err.println("Это именно та проблема, которую решают дженерики!");
        }

        // === ДОПОЛНИТЕЛЬНАЯ ДЕМОНСТРАЦИЯ ПРОБЛЕМЫ ===
        System.out.println("\nЧто на самом деле содержится в списке:");
        for (Object object : list) {
            System.out.println("Объект: " + object + " (тип: " + object.getClass().getSimpleName() + ")");
        }
    }
}