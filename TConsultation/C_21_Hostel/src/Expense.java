/**
 * Класс Expense (Расход) - представляет финансовый расход в системе управления общежитием.
 *
 * Этот класс демонстрирует важные концепции объектно-ориентированного программирования:
 * - Реализацию интерфейса Comparable для естественного упорядочивания объектов
 * - Инкапсуляцию данных через приватные поля и публичные геттеры
 * - Переопределение методов Object (toString)
 * - Работу с примитивными типами данных (double) и объектами (String)
 *
 * Класс используется для:
 * - Учета всех расходов в общежитии
 * - Категоризации трат по типам (коммунальные, ремонт, мероприятия и т.д.)
 * - Сортировки расходов по сумме для анализа
 * - Генерации отчетов о финансовых тратах
 *
 * Реализация Comparable позволяет:
 * - Автоматическую сортировку в коллекциях (Collections.sort)
 * - Использование в отсортированных структурах данных (TreeSet, TreeMap)
 * - Сравнение объектов по естественному порядку (по сумме)
 *
 * @author Sergiy Danylko
 * @version 1.0
 * @see Comparable
 */
class Expense implements Comparable<Expense> {

    /**
     * Описание расхода (на что потрачены деньги).
     * Демонстрирует инкапсуляцию - приватное поле с контролируемым доступом.
     */
    private String description;

    /**
     * Сумма расхода в денежных единицах.
     * Использует тип double для представления денежных сумм с копейками.
     */
    private double amount;

    /**
     * Категория расхода (коммунальные, ремонт, мероприятия и т.д.).
     * Позволяет группировать и анализировать расходы по типам.
     */
    private String category;

    /**
     * Конструктор класса Expense.
     *
     * Создает объект расхода с полной информацией о трате.
     * Все параметры обязательны для создания корректного объекта расхода.
     *
     * @param description описание расхода (на что потрачены деньги)
     * @param amount сумма расхода (должна быть положительной)
     * @param category категория расхода для группировки и анализа
     */
    public Expense(String description, double amount, String category) {
        this.description = description;
        this.amount = amount;
        this.category = category;
    }

    /**
     * Сравнивает текущий расход с другим расходом для сортировки.
     *
     * Реализация метода из интерфейса Comparable<Expense>.
     * Сортирует расходы по сумме в убывающем порядке (от большего к меньшему),
     * что позволяет видеть самые крупные траты в начале списка.
     *
     * Демонстрирует:
     * - Реализацию интерфейса Comparable
     * - Использование Double.compare() для сравнения вещественных чисел
     * - Обратный порядок сортировки (other.amount, this.amount)
     *
     * @param other другой объект Expense для сравнения
     * @return отрицательное число, если текущий расход больше other,
     *         положительное число, если меньше, 0 если равны
     */
    @Override
    public int compareTo(Expense other) {
        // Сортируем по сумме (по убыванию) - самые крупные расходы первыми
        return Double.compare(other.amount, this.amount);
    }

    /**
     * Возвращает строковое представление расхода.
     *
     * Переопределение метода toString() из класса Object.
     * Формирует удобочитаемую строку с информацией о расходе
     * в формате "Категория: Описание - Сумма грн."
     *
     * @return строковое представление расхода для вывода пользователю
     */
    @Override
    public String toString() {
        return category + ": " + description + " - " + amount + " грн.";
    }

    /**
     * Возвращает описание расхода.
     *
     * Геттер для приватного поля description.
     * Демонстрирует принцип инкапсуляции - контролируемый доступ к данным.
     *
     * @return описание того, на что потрачены деньги
     */
    public String getDescription() { return description; }

    /**
     * Возвращает сумму расхода.
     *
     * Геттер для приватного поля amount.
     * Предоставляет доступ к денежной сумме расхода для расчетов и анализа.
     *
     * @return сумма расхода в денежных единицах
     */
    public double getAmount() { return amount; }

    /**
     * Возвращает категорию расхода.
     *
     * Геттер для приватного поля category.
     * Позволяет группировать и фильтровать расходы по типам.
     *
     * @return категория расхода (коммунальные, ремонт, мероприятия и т.д.)
     */
    public String getCategory() { return category; }
}
