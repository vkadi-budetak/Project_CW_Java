import java.util.ArrayList;
import java.util.List;

/**
 * Класс DormManager (Комендант общежития) - представляет управляющего общежитием.
 *
 * Этот класс демонстрирует важные принципы объектно-ориентированного программирования:
 * - Наследование от абстрактного класса Person
 * - Реализацию интерфейса StudentEventOrganizer
 * - Полиморфизм - может выступать как Person и как StudentEventOrganizer
 * - Инкапсуляцию данных через приватные поля
 *
 * Комендант общежития имеет следующие обязанности:
 * - Организация официальных мероприятий в общежитии
 * - Проведение проверок комнат и соблюдения правил
 * - Управление административными процессами
 * - Контроль за порядком и безопасностью
 *
 * Отличается от DormLeader тем, что является административным лицом,
 * а не студентом с дополнительными обязанностями.
 *
 * @author Sergiy Danylko
 * @version 1.0
 * @see Person
 * @see StudentEventOrganizer
 * @see DormLeader
 */
class DormManager extends Person implements StudentEventOrganizer {

    /**
     * Список официальных мероприятий, планируемых комендантом.
     * Демонстрирует инкапсуляцию - приватное поле с контролируемым доступом.
     */
    private List<String> plannedEvents;

    /**
     * Количество лет опыта работы коменданта.
     * Показывает профессиональную квалификацию управляющего.
     */
    private int yearsOfExperience;

    /**
     * Конструктор класса DormManager.
     *
     * Создает объект коменданта общежития с базовой информацией о человеке
     * и специфическими данными о профессиональном опыте.
     *
     * Демонстрирует:
     * - Вызов конструктора родительского класса через super()
     * - Инициализацию специфических полей класса
     * - Создание пустого списка для планируемых мероприятий
     *
     * @param name имя коменданта
     * @param age возраст коменданта
     * @param phoneNumber номер телефона коменданта
     * @param yearsOfExperience количество лет опыта работы
     */
    public DormManager(String name, int age, String phoneNumber, int yearsOfExperience) {
        super(name, age, phoneNumber);
        this.yearsOfExperience = yearsOfExperience;
        this.plannedEvents = new ArrayList<>();
    }

    /**
     * Переопределенный метод представления коменданта.
     *
     * Демонстрирует полиморфизм - каждый тип Person представляется по-своему.
     * Комендант подчеркивает свой административный статус и профессиональный опыт.
     *
     * @return строка с представлением коменданта общежития
     */
    @Override
    public String introduce() {
        return "Здравствуйте! Я " + name + ", комендант общежития с опытом " + yearsOfExperience + " лет";
    }

    /**
     * Организует официальное мероприятие в общежитии.
     *
     * Реализация метода из интерфейса StudentEventOrganizer.
     * Комендант организует официальные мероприятия с административной поддержкой,
     * в отличие от студенческих инициатив старосты.
     *
     * @param eventName название организуемого мероприятия
     */
    @Override
    public void organizeEvent(String eventName) {
        plannedEvents.add(eventName);
        System.out.println("Комендант " + name + " официально организует: " + eventName);
    }

    /**
     * Возвращает список запланированных официальных мероприятий.
     *
     * Реализация метода из интерфейса StudentEventOrganizer.
     * Возвращает копию списка для обеспечения инкапсуляции данных.
     *
     * @return новый список запланированных мероприятий (защищенная копия)
     */
    @Override
    public List<String> getPlannedEvent() {
        return new ArrayList<>(plannedEvents);
    }

    /**
     * Проводит инспекцию комнат в общежитии.
     *
     * Специфический метод класса DormManager, не связанный с интерфейсами.
     * Демонстрирует уникальные обязанности коменданта по контролю
     * за состоянием и порядком в общежитии.
     */
    public void conductInspection() {
        System.out.println("Комендант " + name + " проводит проверку комнат");
    }

    /**
     * Возвращает количество лет опыта работы коменданта.
     *
     * Геттер для приватного поля yearsOfExperience.
     * Демонстрирует принцип инкапсуляции - контролируемый доступ к данным.
     *
     * @return количество лет профессионального опыта
     */
    public int getYearsOfExperience() { return yearsOfExperience; }
}
