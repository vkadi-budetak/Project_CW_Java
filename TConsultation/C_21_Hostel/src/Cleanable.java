/**
 * Интерфейс Cleanable определяет контракт для объектов, которые могут выполнять уборку.
 * Этот интерфейс демонстрирует принцип полиморфизма в ООП - разные классы могут
 * реализовывать этот интерфейс по-своему, но все будут иметь одинаковые методы.
 *
 * Применение: студенты общежития могут быть ответственными за уборку определенных зон.
 *
 * @author Sergiy Danylko
 * @version 1.0
 */
public interface Cleanable {

    /**
     * Выполняет уборку указанной зоны.
     * Этот метод должен быть реализован каждым классом, который имплементирует интерфейс.
     *
     * @param area название зоны для уборки (например, "кухня", "коридор", "ванная")
     */
    void clean(String area);

    /**
     * Проверяет, ответственен ли данный объект за уборку указанной зоны.
     * Позволяет определить, кто должен убирать конкретную область общежития.
     *
     * @param area название зоны для проверки ответственности
     * @return true, если объект ответственен за уборку данной зоны, false - в противном случае
     */
    boolean isResponsibleFor(String area);

}
